# Verbs list..
verbs:
    {
        # Portuguese Verbs.
        Abrir: Func.openNewTab,                         # Open new tab
        Alternar: Func.alterWindow,                     # Altern in two web windows.
        Alterar: Func.alterWindow,                      # Altern in two web windows.
        Aguardar: Func.wait,                            # Wait time to execute next step.
        Apagar: Func.clear,                             # Clear field data
        Arrastar: Func.dragDrop,                        # Drag and drop element to a X,Y position. - Sintaxe: Component, x:<pixel position>, y:<pixel position>
        Acessar: Func.openPage,                         # Access a page address.
        Atualizar: Func.refreshPage,                    # Reload the page
        Avançar: Func.forwardPage,                      # Goes one step forward in the browser history
        Clicar: Func.click,                             # Click in a component.
        Duplo: Func.doubleClick,                        # Double click in a component.
        Fechar: Func.close,                             # Close. (Blank=Close window / Filled=Close browser).
        Informar: Func.inform,                          # Choose a option in a browser alert.
        Mover: Func.mouseOver,                          # Move the mouse over an element.
        Navegar: Func.openBrowser,                      # Open the browser.
        Preencher: Func.fillField,                      # Type a text.
        Pressionar: Func.rightClick,                    # Right click of the mouse.
        Retornar: Func.returnWindow,                    # Return to the main browser window.
        Rolar: Func.scrollPage,                         # Scroll the page on the Y axis
        Segurar: Func.dragDropToElement,                # Drag and drop component to another. - Sintaxe: From component, To component.
        Selecionar: Func.selectDropDownList,            # Select an item in a dropdownlist.
        Teclar: Func.pressButton,                       # Type an especific button in keyboard (Example: ESC, TAB, F1)
        Validar: Func.validateData,                     # Get a component text and compare with expected.
        Voltar: Func.backPage,                          # Goes one step backward in the browser history
        NoExecute: Func.noExecute,                      # Don't execute the step that starts with the word "No" or "Não". ALWAYS in a variable.

        # Spanish Verbs.
        # Abrir: Func.openNewTab, -> Equal Portuguese   # Open new tab
        Cambiar: Func.alterWindow,                      # Altern in two web windows.
        Esperar: Func.wait,                             # Wait time to execute next step.
        Limpiar: Func.clear,                            # Clear field data
        # Arrastar -> Equal Portuguese                  # Drag and drop element to a X,Y position. - Sintaxe: Component, x:<pixel position>, y:<pixel position>
        Acceder: Func.openPage,                         # Access a page address.
        Actualizar: Func.refreshPage,                   # Reload the page
        Avanzar: Func.forwardPage,                      # Goes one step forward in the browser history
        # Clicar  -> Equal Portuguese                   # Click in a component.
        DobleClic: Func.doubleClick,                    # Double click in a component.
        Cerrar: Func.close,                             # Close. (Blank=Close window / Filled=Close browser).
        Elegir: Func.inform,                            # Choose an option in a browser alert.
        # Mover -> Equal Portuguese                     # Move the mouse over an element.
        # Navegar -> Equal Portuguese                   # Open the browser.
        Llenar: Func.fillField,                         # Type a text.
        Presionar: Func.rightClick,                     # Right click of the mouse.
        # Retornar -> Equal Portuguese                  # Return to the main browser window.
        Desplazamiento: Func.scrollPage,                # Scroll the page on the Y axis
        Sostener: Func.dragDropToElement,               # Drag and drop component to another. - Sintaxe: From component, To component.
        # Selecionar -> Equal Portuguese                # Select an item in a dropdownlist.
        # Teclar -> Equal Portuguese                    # Type an especific button in keyboard (Example: ESC, TAB, F1)
        # Validar -> Equal Portuguese                   # Get a component text and compare with expected.
        Retroceder: Func.backPage,                      # Goes one step backward in the browser history
        # NoExecute -> Func.noExecute                   # Don't execute the step that starts with the word "No" or "Não". ALWAYS in a variable.

        # English Verbs.
        Open: Func.openNewTab,                          # Open new tab
        Switch: Func.alterWindow,                       # Altern in two web windows.
        Wait: Func.wait,                                # Wait time to execute next step.
        Clear: Func.clear,                              # Clear field data
        Drag: Func.dragDrop,                            # Drag and drop element to a X,Y position. - Sintaxe: Component, x:<pixel position>, y:<pixel position>
        Access: Func.openPage,                          # Access a page address.
        Refresh: Func.refreshPage,                      # Reload the page
        Forwar: Func.forwardPage,                       # Goes one step forward in the browser history
        Click: Func.click,                              # Click in a component.
        Double: Func.doubleClick,                       # Double click in a component.
        Close: Func.close,                              # Close. (Blank=Close window / Filled=Close browser).
        Inform: Func.inform,                            # Choose a option in a browser alert.
        Move: Func.mouseOver,                           # Move the mouse over an element.
        Navegate: Func.openBrowser,                     # Open the browser.
        Fill: Func.fillField,                           # Type a text.
        Right: Func.rightClick,                         # Right click of the mouse.
        Return: Func.returnWindow,                      # Return to the main browser window.
        Scroll: Func.scrollPage,                        # Scroll the page on the Y axis
        Hold: Func.dragDropToElement,                   # Drag and drop component to another. - Sintaxe: From component, To component.
        Select: Func.selectDropDownList,                # Select an item in a dropdownlist.
        Press: Func.pressButton,                        # Type an especific button in keyboard (Example: ESC, TAB, F1)
        Validate: Func.validateData,                    # Get a component text and compare with expected.
        Back: Func.backPage,                            # Goes one step backward in the browser history
        # NoExecute -> Func.noExecute                   # Don't execute the step that starts with the word "No" or "Não". ALWAYS in a variable.
    }
#List to search the elements. Try to find following the order below.
searchElements:
    {
        searchByID: searchElementByID,
        searchByName: searchElementByName,
        searchByXpath: searchElementByXpath,
        searchByiFrame: searchElementByiFrame,
        searchByLinkText: searchElementByLinkText,
        searchByParcialLinkText: searchElementByParcialLinkText,
        searchByTagName: searchElementByTagName,
        searchByClassName: searchElementByClassName,
        searchByCSS: searchElementByCSS
    }
#List to search the elements attributes to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForAttribute:
    {
        buscarPorID: id,
        buscarPorNome: name,
        buscarPorClass: class,
        buscarPorHREF: a,
        buscarPorSize: size
    }
#List to search the elements to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForComponent:
    {
        buscarPorDiv: div,
        buscarPorTD: td,
        buscarPorTR: tr
    }

#List of logs.
logs:
    {
        AccessAzure: {Type: Success, Msg: Acesso ao Azure DevOps realizado com sucesso, Where: accessAzure},
        OpenPage: {Type: Success, Msg: Acesso à página realizado com sucesso, Where: openPage},
        ActionStart: {Type: Log, Msg: Inicio da execução da automação , Where: createLog},
        AlterWindow: {Type: Success, Msg: O foco da tela foi alterado , Where: alterWindow},
        AttachmentList: {Type: Sucesso, Msg: Sucesso ao ler o anexo do caso de teste manual, Where: attachmentList},
        BackPage: {Type: Success, Msg: Sucesso ao voltar a página , Where: BackPage},
        DragDrop: {Type: Success, Msg: O componente foi arrastado com sucesso , Where: dragDrop},
        Clear: {Type: Success, Msg: O campo foi limpo com sucesso, Where: clear},
        Click: {Type: Success, Msg: Clique realizado com sucesso, Where: click},
        ConvertPDF: {Type: Success, Msg: O EST para PDF foram criados, Where: mainFunction},
        CloseBrowser: {Type: Success, Msg: O browser foi fechado com sucesso, Where: close},
        CloseWindow: {Type: Success, Msg: A janela foi fechada com sucesso, Where: close},
        DoubleClick: {Type: Success, Msg: Duplo clique realizado com sucesso, Where: doubleClick},
        DragDropToElement: {Type: Success, Msg: Foi possível segurar e arrastar o componente até outro componente com sucesso, Where: dragDropToElement},
        ErrorAccessAzure: {Type: Error, Msg: Falha ao acessar o Azure DevOps, Where: accessAzure},
        ErrorBackPage: {Type: Error, Msg: Falha ao voltar a página, Where: BackPage},
        ErrorExecuteStepByStep: {Type: Error, Msg: Erro na execução do passo a passo., Where: executeStepByStep},
        ErrorOpenPage: {Type: Error, Msg: Erro ao acessar página , Where: openPage},
        ErrorAddlog: {Type: Error, Msg: Erro na atualização do log, Where: addlog},
        ErrorAlterWindow: {Type: Error, Msg: O foco não foi alterado de tela , Where: alterWindow},
        ErrorAttachmentList: {Type: Error, Msg: Erro ao ler o anexo do caso de teste manual, Where: attachmentList},
        ErrorDragDrop: {Type: Error, Msg: Não foi possível segurar e arrastar o componente , Where: dragDrop},
        ErrorClick: {Type: Error, Msg: Erro ao clicar no elemento , Where: click},
        ErrorClear: {Type: Error, Msg: Erro ao limpar o campo, Where: clear},
        ErrorClose: {Type: Error, Msg: Erro ao fechar, Where: close},
        ErrorConfigureLanguage: {Type: Error, Msg: Ocorreu um erro na configuração do idioma, Where: configureLanguage},
        ErrorConvertPDF: {Type: Error, Msg: Não foi possível converter o ETS para PDF, Where: mainFunction},
        ErrorCore: {Type: Error, Msg: Ocorreu um erro na aplicação, Where: mainFunction},
        ErrorCreateDirectory: {Type: Error, Msg: Ocorreu um erro na criação do diretório, Where: createDirectory},
        ErrorCreatelog: {Type: Error, Msg: Erro na criação do log, Where: createlog},
        ErrorDeleteFiles: {Type: Error, Msg: Erro ao deletar os arquivos., Where: deleteFiles},
        ErrorDoubleClick: {Type: Error, Msg: Erro no duplo clique no elemento , Where: doubleClick},
        ErrorEmptyLine: {Type: Error, Msg: Há uma linha em branco no caso de teste , Where: ErrorEmptyLine},
        ErrorEST: {Type: Error, Msg: Não foi possível criar o EST , Where: mainFunction},
        ErrorFillField: {Type: Error, Msg: Erro ao preencher campo, Where: fillField},
        ErrorForwardPage: {Type: Error, Msg: Erro ao avançar a página, Where: ForwardPage},
        ErrorFunctionValidateData: {Type: Error, Msg: Erro ao executar a validação, Where: validateData},
        ErrorGenerateHash: {Type: Error, Msg: Erro ao gerar o Hash!, Where: generateHash},
        ErrorGetAttribute: {Type: Error, Msg: Erro ao obter o atributo do elemento!, Where: GetAttribute},
        ErrorGetVariables: {Type: Error, Msg: Erro ao obter a massa de teste!, Where: getVariables},
        ErrorGetSteps: {Type: Error, Msg: Erro ao extrair passos do caso de teste!, Where: GetSteps},
        ErrorGetParameters: {Type: Error, Msg: Erro ao extrair parâmetros do caso de teste!, Where: getParameters},
        ErrorGetTestCase: {Type: Warning, Msg: Este test suit não possui casos de teste! , Where: getTestCase},
        ErrorGetTestCaseRun: {Type: Error, Msg: Erro ao extrair as informações do caso de teste manual!, Where: getTestCaseRun},
        ErrorGetTestPlan: {Type: Warning, Msg: Este projeto não possui test plans! , Where: getTestPlans},
        ErrorGetTestSuit: {Type: Warning, Msg: Este plano de teste não possui test suits! , Where: getTestSuits},
        ErrorGetText: {Type: Error, Msg: Não foi possível obter o texto do componenete e/ou da página , Where: getText},
        ErrorGetTitle: {Type: Error, Msg: Não foi possível obter o título da página!, Where: GetTitle},
        ErrorGetURL: {Type: Error, Msg: Não foi possível obter a URL da página!, Where: GetURL},
        ErrorInform: {Type: Error, Msg: A tela de alerta NÃO foi encontrada!, Where: Inform},
        ErrorIsDisplayed: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar se esta visivel, Where: isDisplayed},
        ErrorIsEnable: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar seu status, Where: IsEnable},
        ErrorIsSelected: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar seu status, Where: isSelected},
        ErrorHighLight: {Type: Error, Msg: Não foi possível destacar o componente , Where: highlight},
        ErrorInstance: {Type: Warning, Msg: Esta instância não possui projetos! , Where: getProjects},
        ErrorLoadConfigs: {Type: Error, Msg: Erro ao carregar as configurações, Where: loadConfigs},
        ErrorLoadProject: {Type: Error, Msg: Erro ao carregar os projetos!, Where: getProjects},
        ErrorLoadTestPlans: {Type: Error, Msg: Erro ao carregar os testplans!, Where: getTestPlans},
        ErrorLoadTestSuit: {Type: Error, Msg: Erro ao carregar o test suit, Where: getTestSuits},
        ErrorLoadTestCase: {Type: Error, Msg: Erro ao carregar o caso de teste!, Where: getTestCases},
        ErrorLoadTestRun: {Type: Error, Msg: Erro ao carregar o TestRun!, Where: createTestRun},
        ErrorMain: {Type: Error, Msg: Erro ao executar o Main, Where: main},
        ErrorMouseOver: {Type: Error, Msg: Objeto NÃO encontrado na tela, Where: mouseOver},
        ErrorNoExecute: {Type: Error, Msg: Este passo NÃO foi ignorado com sucesso, Where: noExecute},
        ErrorOpenBrowser: {Type: Error, Msg: Erro ao abrir o navegador, Where: openBrowser},
        ErrorOpenNewTab: {Type: Error, Msg: Erro ao abrir nova aba, Where: OpenNewTab},
        ErrorReadHash: {Type: Error, Msg: Erro ao ler o Hash!, Where: readHash},
        ErrorRefreshPage: {Type: Error, Msg: Erro ao atualizar a página, Where: RefreshPage},
        ErrorRemoveHTML: {Type: Error, Msg: Erro ao remover o HTML da string, Where: removeHTML},
        Error ReplacePasswordEvidence: {Type: Error, Msg: Falha na alteração das senhas por asteriscos!, Where: ReplacePasswordEvidence},
        ErrorRequest: {Type: Error, Msg: Falha na request!, Where: AzureConnection - Geral},
        ErrorRightClick: {Type: Error, Msg: Erro ao clicar no elemento, Where: rightClick},
        ErrorReturnWindow: {Type: Error, Msg: O foco não foi alterado para a janela desejada, Where: returnWindow},
        ErrorSaveHash: {Type: Error, Msg: Erro ao salvar o Hash!, Where: saveHash},
        ErrorSaveManualPrintScreen: {Type: Error, Msg: 'Falha ao salvar as evidências do caso de teste manual', Where: saveManualPrintScreen},
        ErrorSaveToken: {Type: Error, Msg: Não foi possível salvar o Token no arquivo , Where: saveToken},
        ErrorScreenshot: {Type: Error, Msg: Não foi possível tirar o screenshot , Where: mainFunction},
        ErrorSelectDropDownList: {Type: Error, Msg: Não foi possível selecionar a DropDownList ,Where: selectDropDownList},
        ErrorSelectCombobox: {Type: Error, Msg: Não foi possível selecionar a combobox, Where: selectCombobox},
        ErrorDragDropToElement: {Type: Error, Msg: Não foi possível segurar e arrastar o componente até outro componente, Where: DragDropToElement},
        ErrorScrollPage: {Type: Error, Msg: Erro ao rolar a página, Where: ScrollPage},
        ErrorSizeName: {Type: Error, Msg: O nome do caso de teste deve possuir menos de 50 caracteres., Where: validateTestName},
        ErrorSliceDatas: {Type: Error, Msg: Erro ao desmembrar os dados da massa de teste!, Where: sliceDatas},
        ErrorSliceDataBlank: {Type: Error, Msg: Verifique no Azure. Há pelo menos um campo em branco!, Where: sliceDatas},
        ErrorSpecialCharacter: {Type: Error, Msg: O nome do caso de teste possui caracter especial. Favor alterar., Where: validateTestName},
        ErrorStartAutomation: {Type: Error, Msg: Erro ao executar os passos de teste!, Where: startAutomation},
        ErrorStep: {Type: Error, Msg: Erro no passo , Where: mainFunction},
        ErrorStepFor: {Type: Error, Msg: Erro na execução dos passos, Where: mainFunction},
        ErrorPressButton: {Type: Error, Msg: A tecla informada é inválida , Where: pressButton},
        ErrorTakePicture: {Type: Error, Msg: Erro ao executar o PrintScreen do passo , Where: takePicture},
        ErrorTestNameValidation: {Type: Error, Msg: Falha na validação do nome do caso de teste., Where: validateTestName},
        ErrorTranslateMessage: {Type: Error, Msg: Erro ao realizar a tradução das mensagens, Where: translateMsg},
        ErrorValidateData: {Type: Error, Msg: Resultado obtido diferente do resultado esperado, Where: validateData},
        ErrorVerifyBrowser: {Type: Error, Msg: Não foi possível fechar o browser!, Where: verifyBrowser},
        ErrorWordAddInfo: {Type: Error, Msg: Ocorreu um erro ao adicionar uma informação no Word, Where: wordAddInfo},
        ErrorWait: {Type: Error, Msg: Ocorreu um erro no Aguardar, Where: wait},
        ErrorWordAddSteps: {Type: Error, Msg: Ocorreu um erro ao adicionar o passo no Word, Where: wordAddSteps},
        ErrorWordFindParagraph: {Type: Error, Msg: Não foi possivel encontrar o paragrafo inicial , Where: wordAddSteps},
        ErrorWordSeachText: {Type: Error, Msg: Ocorreu um erro ao procurar o passo no Word, Where: wordSeachText},
        ErrorWordToPDF: {Type: Error, Msg: Ocorreu um erro ao converter para PDF, Where: wordToPDF},
        EvidenceFolder: {Type: Success, Msg: O diretório de evidências foi criado com sucesso., Where: createDirectory},
        FindElement: {Type: Success, Msg: encontrou o componente para informar, Where: findElement},
        FillField: {Type: Success, Msg: O campo foi preenchido com sucesso, Where: fillField},
        ForwardPage: {Type: Success, Msg: A página avançou com sucesso, Where: ForwardPage},
        GetAttribute: {Type: Success, Msg: Sucesso ao obter o atributo do elemento, Where: GetAttribute},
        GetInfoRun: {Type: Success, Msg: Comentários da execução lidos com sucesso!, Where: getInfoRun},
        GetParameters: {Type: Success, Msg: Sucesso ao extrair parâmetros do caso de teste!, Where: getParameters},
        GetSteps: {Type: Success, Msg: Sucesso ao extrair passos do caso de teste!, Where: getSteps},
        GetText: {Type: Success, Msg: Sucesso ao obter texto da página, Where: getText},
        GetTestCaseRun: {Type: Success, Msg: Sucesso ao extrair as informações do caso de teste manual!, Where: getTestCaseRun},
        GetTitle: {Type: Success, Msg: Sucesso ao obter o título da página, Where: GetTitle},
        GetURL: {Type: Success, Msg: Sucesso ao obter a URL da página, Where: GetURL},
        GetVariables: {Type: Success, Msg: Sucesso ao obter a massa de teste!, Where: GetVariables},
        Inform: {Type: Success, Msg: A tela de alerta foi encontrada com sucesso!, Where: Inform},
        IsDisplayed: {Type: Success, Msg: Elemento localizado, Where: isDisplayed},
        IsEnable: {Type: Success, Msg: Elemento localizado, Where: IsEnable},
        IsSelected: {Type: Success, Msg: Elemento localizado, Where: isSelected},
        LoadExecuteTest: {Type: Success, Msg: Sucesso ao carregar a execução do caso de teste!, Where: executeTestCase},
        NoExecute: {Type: Success, Msg: Este passo foi ignorado com sucesso , Where: noExecute},
        MouseOver: {Type: Success, Msg: O mouse foi movimentado com sucesso, Where: mouseOver},
        OpenBrowser: {Type: Success, Msg: Browser aberto com sucesso, Where: openBrowser},
        OpenNewTab: {Type: Success, Msg: Aba aberta com sucesso, Where: OpenNewTab},
        PressButton: {Type: Success, Msg: Botão pressionado, Where: pressButton},
        RefreshPage: {Type: Success, Msg: Página atualizada, Where: RefreshPage},
        ReturnWindow: {Type: Success, Msg: O foco foi alterado para a janela desejada, Where: returnWindow},
        RightClick: {Type: Success, Msg: Clique no botão direito realizado com sucesso, Where: rightClick},
        SaveEvidenceRun: {Type: Success, Msg: Evidência anexada com sucesso na Run!, Where: SaveEvidenceRun},
        SaveEvidenceTestCaseID: {Type: Success, Msg: Link da evidência de teste criado com sucesso!, Where: SaveEvidenceTestCaseID},
        SaveEvidenceTestCaseFile: {Type: Success, Msg: Evidência anexada com sucesso na issue de Test!, Where: SaveEvidenceTestCaseFile},
        SaveManualPrintScreen: {Type: Success, Msg: Sucesso ao salvar as evidências deste passo, Where: saveManualPrintScreen},
        SaveToken: {Type: Success, Msg: O Token foi gravado com sucesso! , Where: saveToken},
        ScrollPage: {Type: Success, Msg: O comando para rolar a página foi executado com sucesso, Where: ScrollPage},
        SelectDropDownList: {Type: Success, Msg: Item selecionado na DropDownList, Where: selectDropDownList},
        SliceDatas: {Type: Success, Msg: Sucesso ao desmembrar os dados da massa de teste!, Where: sliceDatas},
        StatusIDTestCase: {Type: Success, Msg: Point ID do caso de teste consultado com sucesso!, Where: createTestRun},
        StatusRun: {Type: Success, Msg: O status da Run foi atualizado com sucesso!, Where: updateRun},
        StatusTestCase: {Type: Success, Msg: Caso de teste consultado com sucesso!, Where: createTestRun - TestRun},
        TakePicture: {Type: Success, Msg: PrintScreen realizado com sucesso, Where: takePicture},
        TestCaseFinished: {Type: Log, Msg: Caso de teste finalizado!, Where: mainFunction},
        UpdateTestCaseRun: {Type: Success, Msg: Status do caso de teste atualizado com sucesso!, Where: updateTestCaseRun},
        ValidateData: {Type: Success, Msg: Dados validados com sucesso, Where: validateData},
        ValidateDataExpected: {Type: Log, Msg: Texto esperado, Where: validateDataExpected},
        ValidateDataObtained: {Type: Log, Msg: Texto obtido, Where: validateDataObtained},
        Wait: {Type: Success, Msg: Aguardou o tempo solicitado com sucesso, Where: wait},
        WarningEvidenceFolder: {Type: Warning, Msg: A evidência NÃO foi atualizada, Where: createDirectory},
        WarningFindElement: {Type: Warning, Msg: NÃO encontrou o componente para informar, Where: findElement}
    }

#Folder list.
directories:
    {
        ConfigFolder: Automation\configs,
        HashFolder: C:\Ibope\Repository\Automation\Hash,
        LogFolder: C:\Ibope\Repository\Automation\Logs,
        EvidenceFolder: C:\Ibope\Repository\Automation\Evidences,
        EvidenceFolderManual: C:\Ibope\Repository\Automation\Evidences\Manual,
        ESTFile: Automation\evidence\ETS - ,
        TokensFile: C:\Ibope\Repository\Automation\Tokens,
        WebDriverChrome: Automation\drivers\Chrome32Bits.exe,
        WebDriverFirefox: Automation\drivers\Firefox.exe,
        WebDriverEdge: Automation\drivers\MSEdge64Bits.exe,
        WebDriverEdgeLegacy: Automation\drivers\MSEdgeLegacy-v16.exe,
        WebDriverIE: Automation\drivers\IE32bits.exe
    }

# List of other configurations.
otherConfigs:
    {
        Agent: 'Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion Chrome/24.0.1312.27 Safari/537.17 Mozilla/5.0 CK={} (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',
        AskRunID: {Type: Info, Msg: 'Por favor informe o ID da Run: ', Where: generateManualEvidence},
        Browser: '',
        ComputerName: '',
        ChooseOption: {Type: Info, Msg: 'Informe uma opção: ', Where: AutomationCore_Azure},
        DisabledStep: {Type: Info, Msg: 'Passo desabilitado devido as necessidades do teste', Where: wordAddSteps},
        EvidenceName: Screenshot_,
        EvidenceExtension: .png,
        EvidenceWidth: Inches(6.0),
        EvidenceHeight: Inches(3.8),
        EvidenceQuestion: {Type: Info, Msg: 'Deseja gravar evidências localmente e no Azure. [Y/s] = Sim ou [N/n] = Não?  ', Where: AutomationCore_Azure},
        ETSName: CT,
        ETSExtension: .docx,
        GeneratingEvidence: {Type: Info, Msg: Gerando arquivo de evidência ..., Where: AutomationCore_Azure},
        GetParameters: {Type: Info, Msg: Erro ao extrair parâmetros do caso de teste!, Where: AutomationCore_Azure},
        GetTestSuit: {Type: Info, Msg: Este plano de teste não possui test suits!, Where: AutomationCore_Azure},
        HttpBasicAuth: '',
        IDRunInvalid: {Type: Info, Msg: Não foi encontrado o ID Run , Where: getTestCaseRun},
        InformTokenPart1: {Type: Info, Msg: Por favor informe o seu token do Azure DevOps., Where: AutomationCore_Azure},
        InformTokenPart2: {Type: Info, Msg: 'Para gerá-lo acesso o link https://kantarware.visualstudio.com/_usersSettings/tokens', Where: AutomationCore_Azure},
        Language: '',
        NoAction: {Type: Info, Msg: 'Não', Where: AutomationCore_Azure},
        NoEvidences: {Type: Info, Msg: Não há imagens para este teste ou algum iteração não foi executada., Where: azureConnection},
        NoExecutions: {Type: Info, Msg: Não há execuções para este teste , Where: azureConnection},
        NoTranslating: 'The messages were not changed. A new translation was not necessary ',
        OptionInvalid: {Type: Info, Msg: não é uma opção válida , Where: azureConnection},
        ProjectList: {Type: Info, Msg: Lista de projetos , Where: azureConnection},
        RequestOK: {Type: Info, Msg: Request realizada com sucesso!, Where: azureConnection},
        ReplaceEvidence: '',
        Exit: {Type: Info, Msg: Fechar o menu, Where: azureConnection},
        StatusIDTestCase: {Type: Info, Msg: Point ID do caso de teste consultado com sucesso, Where: azureConnection},
        StatusTestCase: {Type: Info, Msg: Caso de teste consultado com sucesso, Where: azureConnection},
        Step: {Type: Info, Msg: PASSO, Where: AutomationCore_Azure},
        StepName: Step,
        StepNotFound: {Type: Info, Msg: Falha ao executar este passo!, Where: AutomationCore_Azure},
        Summary: {Type: Info, Msg: Este caso de teste não possui nenhuma informação adicional., Where: AutomationCore_Azure},
        TestCaseList: {Type: Info, Msg: 'Lista de casos de teste: ' , Where: azureConnection},
        TestPlanList: {Type: Info, Msg: 'Lista de planos de teste: ' , Where: azureConnection},
        TestSuitList: {Type: Info, Msg: 'Lista de suíte de teste: ' , Where: azureConnection},
        TranslateMessage: 'Messages translated with success!',
        Translating: 'Please wait, the translation is running. It could take some minutes...',
        Token: '',
        Verb: {Type: Info, Msg: VERBO, Where: AutomationCore_Azure},
        WordParagraph: {Type: Info, Msg: 'Evidências dos passos', Where: automationAux}
    }